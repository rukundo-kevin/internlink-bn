// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum STATE_ENUM {
  FRESH
  VERIFIED
  DISABLED
  DELETED
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ROLE_ENUM {
  ADMIN
  STUDENT
  SUPERVISOR
}

enum InternshipStatus {
  OPEN
  CLOSED
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  firstName   String
  lastName    String
  telephone   String?      @unique
  username    String?
  gender      String?
  password    String
  role        ROLE_ENUM    @default(STUDENT)
  state       STATE_ENUM   @default(FRESH)
  students    Student[]
  evaluations Evaluation[]
}

model Student {
  id           Int           @id @default(autoincrement())
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  department   String?
  school      String?
  skills       String[]
  languages    String[]
  photoUrl     String?
  resumeUrl    String?
  resumeName   String?
  applications Application[]
  education    Education[]
  experience   Experience[]
  certificates Certificate[]
}

model Internship {
  id           Int              @id @default(autoincrement())
  title        String
  description  String
  duration     String
  durationUnit String
  deadline     DateTime
  department   String
  startDate    DateTime?
  photoUrl     String?
  documentUrl  String?
  status       InternshipStatus @default(OPEN)
  created      DateTime         @default(now())
  updated      DateTime         @updatedAt
  applications Application[]
}

model Application {
  id           Int               @id @default(autoincrement())
  student      Student           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId    Int
  internship   Internship        @relation(fields: [internshipId], references: [id], onDelete: Cascade)
  internshipId Int
  state        ApplicationStatus @default(PENDING)
  createdAt    DateTime          @default(now())
  comment    String?
  updatedAt    DateTime          @updatedAt
  evaluations  Evaluation[]
}

model Evaluation {
  id            Int         @id @default(autoincrement())
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId Int
  supervisor    User        @relation(fields: [supervisorId], references: [id], onDelete: Cascade)
  supervisorId  Int
  comment       String?
  score         Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Education {
  id         Int      @id @default(autoincrement())
  student    Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId  Int
  school     String
  department String
  startDate  DateTime
  endDate    DateTime
  degree     String
  grade      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Experience {
  id          Int      @id @default(autoincrement())
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId   Int
  title       String
  company     String
  startDate   DateTime
  endDate     DateTime
  location    String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Certificate {
  id           Int      @id @default(autoincrement())
  student      Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId    Int
  title        String
  organization String
  description  String?
  documentUrl  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
